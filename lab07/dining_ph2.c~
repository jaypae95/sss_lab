/* ----------------------------------------------------------------------------------------------------
 *  파일: dining_ph1.c
 *  기능	: 동기화가 된 dining philosopher 프로그램. 젓가락을 2개 들면 식사
 *  개발자: 201520934 배재훈
 *  날짜	: 1차 개발 : 2018년 5월 4일 
 *----------------------------------------------------------------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

int chopstick[5] = { 1, 1, 1, 1, 1}; //5개의 chopstick 초기화
pthread_mutex_t sync_mutex;
void * philosopher (void *);
int main() {
		int i;
		pthread_t tid[5];
		pthread_mutex_init(&sync_mutex, NULL);

		for(i = 0; i < 5; i++) {
				if(pthread_create(&tid[i], NULL, philosopher, (void *) i) != 0) {
						printf("fail to create thread\n");
						return 0;
				}
		}
		for(i = 0; i<5; i++) {
				if(pthread_join(tid[i], NULL) != 0) {
						printf("fail to join thread\n");
						return 0;
				}
		}
}

void * philosopher (void * args) {
		int k;
		int p_left = 0;
		int p_right = 0;
		int right = ((int)args + 4) % 5;
		int left = ((int)args + 1) % 5;

		for(k=1 ; ;k++ ) {
				pthread_mutex_lock(&sync_mutex);
				if(chopstick[left] == 1 && chopstick[right] == 1) {
						chopstick[right] = 0;
						chopstick[left] = 0;
						p_left = 1;
						p_right = 1;
				}
				pthread_mutex_unlock(&sync_mutex);

		
				if(p_left == 1  && p_right == 1) {
						printf("#%d philosopher is EATING..\t    <<%d>>\n", (int)args+1, k);
						p_left = 0;
						p_right = 0;

						sleep(1);
						chopstick[left] = 1;
						chopstick[right] = 1;
						usleep(1);
				}
				
				else {
						printf("#%d philosopher is thinking..(r:%d l:%d)<<%d>>\n", (int)args+1, p_right, p_left, k);
						sleep(1);
				}
		}
					
}

